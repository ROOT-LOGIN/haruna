<?xml version="1.0" encoding="utf-8" ?>
<classfierCollection>
    <registerCollection>
        <register val="cs"></register>
        <register val="ds"></register>
        <register val="ss"></register>
        <register val="es"></register>
        <register val="fs"></register>
        <register val="gs"></register>
        
        <register val="al"></register>
        <register val="ah"></register>
        <register val="ax"></register>
        <register val="eax"></register>
        <register val="rax"></register>
        <register val="bl"></register>
        <register val="bh"></register>
        <register val="bx"></register>
        <register val="ebx"></register>
        <register val="rbx"></register>
        <register val="cl"></register>
        <register val="ch"></register>
        <register val="cx"></register>
        <register val="ecx"></register>
        <register val="rcx"></register>
        <register val="dl"></register>
        <register val="dh"></register>
        <register val="dx"></register>
        <register val="edx"></register>
        <register val="rdx"></register>
        
        <register val="bpl"></register>
        <register val="bp"></register>
        <register val="ebp"></register>
        <register val="rbp"></register>
        <register val="spl"></register>
        <register val="sp"></register>
        <register val="esp"></register>
        <register val="rsp"></register>
        <register val="sil"></register>
        <register val="si"></register>
        <register val="esi"></register>
        <register val="rsi"></register>
        <register val="dil"></register>
        <register val="di"></register>
        <register val="edi"></register>
        <register val="rdi"></register>

        <register val="r8b"></register>
        <register val="r8w"></register>
        <register val="r8d"></register>
        <register val="r8"></register>
        <register val="r9b"></register>
        <register val="r9w"></register>
        <register val="r9d"></register>
        <register val="r9"></register>
        <register val="r10b"></register>
        <register val="r10w"></register>
        <register val="r10d"></register>
        <register val="r10"></register>
        <register val="r11b"></register>
        <register val="r11w"></register>
        <register val="r11d"></register>
        <register val="r11"></register>
        <register val="r12b"></register>
        <register val="r12w"></register>
        <register val="r12d"></register>
        <register val="r12"></register>
        <register val="r13b"></register>
        <register val="r13w"></register>
        <register val="r13d"></register>
        <register val="r13"></register>
        <register val="r14b"></register>
        <register val="r14w"></register>
        <register val="r14d"></register>
        <register val="r14"></register>
        <register val="r15b"></register>
        <register val="r15w"></register>
        <register val="r15d"></register>
        <register val="r15"></register>

        <register val="xmm0"></register>
        <register val="xmm1"></register>
        <register val="xmm2"></register>
        <register val="xmm3"></register>
        <register val="xmm4"></register>
        <register val="xmm5"></register>
        <register val="xmm6"></register>
        <register val="xmm7"></register>

        <register val="ymm0"></register>
        <register val="ymm1"></register>
        <register val="ymm2"></register>
        <register val="ymm3"></register>
        <register val="ymm4"></register>
        <register val="ymm5"></register>
        <register val="ymm6"></register>
        <register val="ymm7"></register>
    
        <register val="zmm0"></register>
        <register val="zmm1"></register>
        <register val="zmm2"></register>
        <register val="zmm3"></register>
        <register val="zmm4"></register>
        <register val="zmm5"></register>
        <register val="zmm6"></register>
        <register val="zmm7"></register>
    </registerCollection>
    <instructionCollection>
        <!--Conventional instructions-->
        <instruction val="aaa">ASCII adjust AL after addition</instruction>
        <instruction val="aad">ASCII Adjust AX Before Division</instruction>
        <instruction val="aam">ASCII Adjust AX After Multiply</instruction>
        <instruction val="aas">ASCII Adjust AL After Subtraction</instruction>
        <instruction val="adc">Add with Carry</instruction>
        <instruction val="adcx">Unsigned Integer Addition of Two Operands with Carry Flag</instruction>
        <instruction val="add">Add</instruction>
        <instruction val="addpd">Add Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="addps">Add Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="addsd">Add Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="addss">Add Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="addsubpd">Packed Double-FP Add/Subtract</instruction>
        <instruction val="addsubps">Packed Single-FP Add/Subtract</instruction>
        <instruction val="adox">Unsigned Integer Addition of Two Operands with Overflow Flag</instruction>
        <instruction val="aesdec">Perform One Round of an AES Decryption Flow</instruction>
        <instruction val="aesdeclast">Perform Last Round of an AES Decryption Flow</instruction>
        <instruction val="aesenc">Perform One Round of an AES Encryption Flow</instruction>
        <instruction val="aesenclast">Perform Last Round of an AES Encryption Flow</instruction>
        <instruction val="aesimc">Perform the AES InvMixColumn Transformation</instruction>
        <instruction val="aeskeygenassist">AES Round Key Generation Assist</instruction>
        <instruction val="and">Logical AND</instruction>
        <instruction val="andn">Logical AND NOT</instruction>
        <instruction val="andpd">Bitwise Logical AND of Packed Double Precision Floating-Point Values</instruction>
        <instruction val="andps">Bitwise Logical AND of Packed Single Precision Floating-Point Values</instruction>
        <instruction val="andnpd">Bitwise Logical AND NOT of Packed Double Precision Floating-Point Values</instruction>
        <instruction val="andnps">Bitwise Logical AND NOT of Packed Single Precision Floating-Point Values</instruction>
        <instruction val="arpl">Adjust RPL Field of Segment Selector</instruction>        
        <instruction val="bextr">Bit Field Extract</instruction>
        <instruction val="blendpd">Blend Packed Double Precision Floating-Point Values</instruction>
        <instruction val="blendps">Blend Packed Single Precision Floating-Point Values</instruction>
        <instruction val="blendvpd">Variable Blend Packed Double Precision Floating-Point Values</instruction>
        <instruction val="blendvps">Variable Blend Packed Single Precision Floating-Point Values</instruction>
        <instruction val="blsi">Extract Lowest Set Isolated Bit</instruction>
        <instruction val="blsmsk">Get Mask Up to Lowest Set Bit</instruction>
        <instruction val="blsr">Reset Lowest Set Bit</instruction>
        <instruction val="bndcl">Check Lower Bound</instruction>
        <instruction val="bndcu">Check Upper Bound</instruction>
        <instruction val="bndcn">Check Upper Bound</instruction>
        <instruction val="bndldx">Load Extended Bounds Using Address Translation</instruction>
        <instruction val="bndmk">Make Bounds</instruction>
        <instruction val="bndmov">Move Bounds</instruction>
        <instruction val="bndstx">Store Extended Bounds Using Address Translation</instruction>
        <instruction val="bound">Check Array Index Against Bounds</instruction>
        <instruction val="bsf">Bit Scan Forward</instruction>
        <instruction val="bsr">Bit Scan Reverse</instruction>
        <instruction val="bswap">Byte Swap</instruction>
        <instruction val="bt">Bit Test</instruction>
        <instruction val="btc">Bit Test and Complement</instruction>
        <instruction val="btr">Bit Test and Reset</instruction>
        <instruction val="bts">Bit Test and Set</instruction>
        <instruction val="bzhi">Zero High Bits Starting with Specified Bit Position</instruction>
        <instruction val="call">Call Procedure</instruction>
        <instruction val="cbw">Convert Byte to Word</instruction>
        <instruction val="cwde">Convert Word to Doubleword</instruction>
        <instruction val="cdqe">Convert Doubleword to Quadword</instruction>        
        <instruction val="clac">Clear AC Flag in EFLAGS Register</instruction>   
        <instruction val="clc">Clear Carry Flag</instruction>        
        <instruction val="cld">Clear Direction Flag</instruction>
        <instruction val="cflush">Flush Cache Line</instruction>
        <instruction val="cflushopt">Flush Cache Line Optimized</instruction>
        <instruction val="cli">Clear Interrupt Flag</instruction>
        <instruction val="clts">Clear Task-Switched Flag in CR0</instruction>
        <instruction val="cmc">Complement Carry Flag</instruction>
        <instruction val="cmova">Conditional Move</instruction>
        <instruction val="cmovae">Conditional Move</instruction>
        <instruction val="cmovb">Conditional Move</instruction>
        <instruction val="cmovbe">Conditional Move</instruction>
        <instruction val="cmovc">Conditional Move</instruction>
        <instruction val="cmove">Conditional Move</instruction>
        <instruction val="cmovg">Conditional Move</instruction>
        <instruction val="cmovge">Conditional Move</instruction>
        <instruction val="cmovl">Conditional Move</instruction>
        <instruction val="cmovle">Conditional Move</instruction>
        <instruction val="cmovna">Conditional Move</instruction>
        <instruction val="cmovnae">Conditional Move</instruction>
        <instruction val="cmovnb">Conditional Move</instruction>
        <instruction val="cmovnbe">Conditional Move</instruction>
        <instruction val="cmovnc">Conditional Move</instruction>
        <instruction val="cmovne">Conditional Move</instruction>
        <instruction val="cmovng">Conditional Move</instruction>
        <instruction val="cmovnge">Conditional Move</instruction>
        <instruction val="cmovnl">Conditional Move</instruction>
        <instruction val="cmovnle">Conditional Move</instruction>
        <instruction val="cmovno">Conditional Move</instruction>
        <instruction val="cmovnp">Conditional Move</instruction>
        <instruction val="cmovns">Conditional Move</instruction>
        <instruction val="cmovnz">Conditional Move</instruction>
        <instruction val="cmovo">Conditional Move</instruction>
        <instruction val="cmovp">Conditional Move</instruction>
        <instruction val="cmovpe">Conditional Move</instruction>
        <instruction val="cmovpo">Conditional Move</instruction>
        <instruction val="cmovs">Conditional Move</instruction>
        <instruction val="cmovz">Conditional Move</instruction>        
        <instruction val="cmp">Compare Two Operands</instruction>
        <instruction val="cmppd">CMPPD—Compare Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="cmpps">Compare Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="cmps">Compare String Operands</instruction>
        <instruction val="cmpsb">Compare String Operands</instruction>
        <instruction val="cmpsw">Compare String Operands</instruction>
        <instruction val="cmpsd">Compare String Operands or Compare Scalar Double-Precision Floating-Point Value</instruction> <!--comare string or compare double-->
        <instruction val="cmpsq">Compare String Operands</instruction>
        <instruction val="cmpss">Compare Scalar Single-Precision Floating-Point Value</instruction>        
        <instruction val="cmpxchg">Compare and Exchange</instruction>
        <instruction val="cmpxchg8b">Compare and Exchange Bytes</instruction>
        <instruction val="cmpxchg16b">Compare and Exchange Bytes</instruction>
        <instruction val="comisd">Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS</instruction>
        <instruction val="comiss">Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS</instruction>
        <instruction val="cpuid">CPU Identification</instruction>
        <instruction val="crc32">Accumulate CRC32 Value</instruction>
        <instruction val="cvtdq2pd">Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="cvtdq2ps">Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="cvtpd2dq">Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers</instruction>
        <instruction val="cvtpd2pi">Convert Packed Double-Precision FP Values to Packed Dword Integers</instruction>
        <instruction val="cvtpd2ps">Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="cvtpi2pd">Convert Packed Dword Integers to Packed Double-Precision FP Values</instruction>
        <instruction val="cvtpi2ps">Convert Packed Dword Integers to Packed Single-Precision FP Values</instruction>
        <instruction val="cvtps2dq">Convert Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values</instruction>
        <instruction val="cvtps2pd">Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="cvtps2pi">Convert Packed Single-Precision FP Values to Packed Dword Integers</instruction>
        <instruction val="cvtsd2si">Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer</instruction>
        <instruction val="cctsd2ss">Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="cvtsi2sd">Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="cvtsi2ss">Convert Doubleword Integer to Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="cvtss2sd">Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="cvtss2si">Convert Scalar Single-Precision Floating-Point Value to Doubleword Integer</instruction>
        <instruction val="cvttpd2dq">Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers</instruction>
        <instruction val="cvttpd2pi">Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers</instruction>
        <instruction val="cvttps2dq">Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values</instruction>
        <instruction val="cvttps2pi">Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers</instruction>
        <instruction val="cvttsd2si">Convert with Truncation Scalar Double-Precision Floating-Point Value to Signed Integer</instruction>
        <instruction val="cvttss2si">Convert with Truncation Scalar Single-Precision Floating-Point Value to Integer</instruction>
        <instruction val="cwd">Convert Word to Doubleword</instruction>
        <instruction val="cdq">Convert Doubleword to Quadword</instruction>
        <instruction val="cqo">Convert Quadword to double-Quadword</instruction>
        <instruction val="daa">Decimal Adjust AL after Addition</instruction>
        <instruction val="das">Decimal Adjust AL after Subtraction</instruction>
        <instruction val="dec">Decrement by 1</instruction>
        <instruction val="div">Unsigned Divide</instruction>
        <instruction val="divpd">Divide Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="divps">Divide Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="divsd">Divide Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="divss">Divide Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="dppd">Dot Product of Packed Double Precision Floating-Point Values</instruction>
        <instruction val="dpps">Dot Product of Packed Single Precision Floating-Point Values</instruction>
        <instruction val="emms">Empty MMX Technology State</instruction>
        <instruction val="enter">Make Stack Frame for Procedure Parameters</instruction>
        <instruction val="extractps">Extract Packed Floating-Point Values</instruction>
        <instruction val="f2xm1">Compute 2x–1</instruction>
        <instruction val="fabs">Absolute Value</instruction>
        <instruction val="fadd">Add</instruction>
        <instruction val="faddp">Add</instruction>
        <instruction val="fiadd">Add</instruction>
        <instruction val="fbld">Load Binary Coded Decimal</instruction>
        <instruction val="fbstp">Store BCD Integer and Pop</instruction>
        <instruction val="fchs">Change Sign</instruction>
        <instruction val="fclex">Clear Exceptions</instruction>
        <instruction val="fnclex">Clear Exceptions</instruction>
        <instruction val="fcmovb">Floating-Point Conditional Move</instruction>
        <instruction val="fcmove">Floating-Point Conditional Move</instruction>
        <instruction val="fcmovbe">Floating-Point Conditional Move</instruction>
        <instruction val="fcmovu">Floating-Point Conditional Move</instruction>
        <instruction val="fcmovnb">Floating-Point Conditional Move</instruction>
        <instruction val="fcmovne">Floating-Point Conditional Move</instruction>
        <instruction val="fcmovnbe">Floating-Point Conditional Move</instruction>
        <instruction val="fcmovnu">Floating-Point Conditional Move</instruction>
        <instruction val="fcom">Compare Floating Point Values</instruction>
        <instruction val="fcomp">Compare Floating Point Values</instruction>
        <instruction val="fcompp">Compare Floating Point Values</instruction>
        <instruction val="fcomi">Compare Floating Point Values and Set EFLAGS</instruction>
        <instruction val="fcomip">Compare Floating Point Values and Set EFLAGS</instruction>
        <instruction val="fucomi">Compare Floating Point Values and Set EFLAGS</instruction>
        <instruction val="fucomip">Compare Floating Point Values and Set EFLAGS</instruction>
        <instruction val="fcos">Cosine</instruction>
        <instruction val="fdecstp">Decrement Stack-Top Pointer</instruction>
        <instruction val="fdiv">Divide</instruction>
        <instruction val="fdivp">Divide</instruction>
        <instruction val="fidiv">Divide</instruction>
        <instruction val="fdivr">Reverse Divide</instruction>
        <instruction val="fdivrp">Reverse Divide</instruction>
        <instruction val="fidivr">Reverse Divide</instruction>
        <instruction val="ffree">Free Floating-Point Register</instruction>
        <instruction val="ficom">Compare Integer</instruction>
        <instruction val="ficomp">Compare Integer</instruction>
        <instruction val="fild">Load Integer</instruction>
        <instruction val="fincstp">Increment Stack-Top Pointer</instruction>
        <instruction val="finit">Initialize Floating-Point Unit</instruction>
        <instruction val="fninit">Initialize Floating-Point Unit</instruction>
        <instruction val="fist">Store Integer</instruction>
        <instruction val="fistp">Store Integer</instruction>
        <instruction val="fisttp">Store Integer with Truncation</instruction>
        <instruction val="fld">Load Floating Point Value</instruction>
        <instruction val="fld1">Load Constant</instruction>
        <instruction val="fld2t">Load Constant</instruction>
        <instruction val="fldl2e">Load Constant</instruction>
        <instruction val="fldpi">Load Constant</instruction>
        <instruction val="fldlg2">Load Constant</instruction>
        <instruction val="fldln2">Load Constant</instruction>
        <instruction val="fldz">Load Constant</instruction>
        <instruction val="fldcw">Load x87 FPU Control Word</instruction>
        <instruction val="fldenv">Load x87 FPU Environment</instruction>
        <instruction val="fmul">Multiply</instruction>
        <instruction val="fmulp">Multiply</instruction>
        <instruction val="fimul">Multiply</instruction>
        <instruction val="fnop">No Operation</instruction>
        <instruction val="fpatan">Partial Arctangent</instruction>
        <instruction val="fprem">Partial Remainder</instruction>
        <instruction val="fprem1">Partial Remainder</instruction>
        <instruction val="fptan">Partial Tangent</instruction>
        <instruction val="frndint">Round to Integer</instruction>
        <instruction val="frstor">Restore x87 FPU State</instruction>
        <instruction val="fsave">Store x87 FPU State</instruction>
        <instruction val="fnsave">Store x87 FPU State</instruction>
        <instruction val="fscale">Scale</instruction>
        <instruction val="fsin">Sine</instruction>
        <instruction val="fsincos">Sine and Cosine</instruction>
        <instruction val="fsqrt">Square Root</instruction>
        <instruction val="fst">Store Floating Point Value</instruction>
        <instruction val="fstp">Store Floating Point Value</instruction>
        <instruction val="fstcw">Store x87 FPU Control Word</instruction>
        <instruction val="fnstcw">Store x87 FPU Control Word</instruction>
        <instruction val="fstenv">Store x87 FPU Environment</instruction>
        <instruction val="fnstenv">Store x87 FPU Environment</instruction>
        <instruction val="fstsw">FNSTSW—Store x87 FPU Status Word</instruction>
        <instruction val="fnstsw">FNSTSW—Store x87 FPU Status Word</instruction>
        <instruction val="fsub">Subtract</instruction>
        <instruction val="fsubp">Subtract</instruction>
        <instruction val="fisub">Subtract</instruction>
        <instruction val="fsubr">Reverse Subtract</instruction>
        <instruction val="fsubrp">Reverse Subtract</instruction>
        <instruction val="fisubr">Reverse Subtract</instruction>
        <instruction val="ftst">TEST</instruction>
        <instruction val="fucom">Unordered Compare Floating Point Values</instruction>
        <instruction val="fucomp">Unordered Compare Floating Point Values</instruction>
        <instruction val="fucompp">Unordered Compare Floating Point Values</instruction>
        <instruction val="fxam">Examine Floating-Point</instruction>
        <instruction val="fxch">Exchange Register Contents</instruction>
        <instruction val="fxrstor">Restore x87 FPU, MMX, XMM, and MXCSR State</instruction>
        <instruction val="fxsave">FXSAVE—Save x87 FPU, MMX Technology, and SSE State</instruction>
        <instruction val="fxtract">Extract Exponent and Significand</instruction>
        <instruction val="fyl2x">Compute y ∗ log2x</instruction>
        <instruction val="fyl2xp1">Compute y ∗ log2(x +1)</instruction>
        <instruction val="haddpd">Packed Double-FP Horizontal Add</instruction>
        <instruction val="haddps">Packed Single-FP Horizontal Add</instruction>
        <instruction val="hlt">Halt</instruction>
        <instruction val="hsubpd">Packed Double-FP Horizontal Subtract</instruction>
        <instruction val="hsubps">Packed Single-FP Horizontal Subtract</instruction>
        <instruction val="idiv">Signed Divide</instruction>
        <instruction val="imul">Signed Multiply</instruction>
        <instruction val="in">Input from Port</instruction>
        <instruction val="inc">Increment by 1</instruction>
        <instruction val="ins">Input from Port to String</instruction>
        <instruction val="insb">Input from Port to String</instruction>
        <instruction val="insw">Input from Port to String</instruction>
        <instruction val="insd">Input from Port to String</instruction>
        <instruction val="insertps">Insert Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="int">Call to Interrupt Procedure</instruction>
        <instruction val="into">Call to Interrupt Procedure(int 4)</instruction>
        <instruction val="invd">Invalidate Internal Caches</instruction>
        <instruction val="invlpg">Invalidate TLB Entries</instruction>
        <instruction val="invpcid">Invalidate Process-Context Identifier</instruction>
        <instruction val="iret">Interrupt Return</instruction>
        <instruction val="iretd">Interrupt Return</instruction>
        <instruction val="iretq">Interrupt Return</instruction>
        <instruction val="ja">Jump if Condition Is Met</instruction>
        <instruction val="jae">Jump if Condition Is Met</instruction>
        <instruction val="jb">Jump if Condition Is Met</instruction>
        <instruction val="jbe">Jump if Condition Is Met</instruction>
        <instruction val="jc">Jump if Condition Is Met</instruction>
        <instruction val="jcxz">Jump if Condition Is Met</instruction>
        <instruction val="jecxz">Jump if Condition Is Met</instruction>
        <instruction val="jrcxz">Jump if Condition Is Met</instruction>
        <instruction val="je">Jump if Condition Is Met</instruction>
        <instruction val="jg">Jump if Condition Is Met</instruction>
        <instruction val="jge">Jump if Condition Is Met</instruction>
        <instruction val="jl">Jump if Condition Is Met</instruction>
        <instruction val="jle">Jump if Condition Is Met</instruction>
        <instruction val="jna">Jump if Condition Is Met</instruction>
        <instruction val="jnae">Jump if Condition Is Met</instruction>
        <instruction val="jnb">Jump if Condition Is Met</instruction>
        <instruction val="jnbe">Jump if Condition Is Met</instruction>
        <instruction val="jnc">Jump if Condition Is Met</instruction>
        <instruction val="jne">Jump if Condition Is Met</instruction>
        <instruction val="jng">Jump if Condition Is Met</instruction>
        <instruction val="jnge">Jump if Condition Is Met</instruction>
        <instruction val="jnl">Jump if Condition Is Met</instruction>
        <instruction val="jnle">Jump if Condition Is Met</instruction>
        <instruction val="jno">Jump if Condition Is Met</instruction>
        <instruction val="jnp">Jump if Condition Is Met</instruction>
        <instruction val="jns">Jump if Condition Is Met</instruction>
        <instruction val="jnz">Jump if Condition Is Met</instruction>
        <instruction val="jo">Jump if Condition Is Met</instruction>
        <instruction val="jp">Jump if Condition Is Met</instruction>
        <instruction val="jpe">Jump if Condition Is Met</instruction>
        <instruction val="jpo">Jump if Condition Is Met</instruction>
        <instruction val="js">Jump if Condition Is Met</instruction>
        <instruction val="jz">Jump if Condition Is Met</instruction>
        <instruction val="jmp">Jump</instruction>
        <instruction val="kaddb">ADD Two Masks</instruction>
        <instruction val="kaddd">ADD Two Masks</instruction>
        <instruction val="kaddq">ADD Two Masks</instruction>
        <instruction val="kaddw">ADD Two Masks</instruction>
        <instruction val="kandb">Bitwise Logical AND Masks</instruction>
        <instruction val="kandd">Bitwise Logical AND Masks</instruction>
        <instruction val="kandq">Bitwise Logical AND Masks</instruction>
        <instruction val="kandw">Bitwise Logical AND Masks</instruction>
        <instruction val="kandnb">Bitwise Logical AND NOT Masks</instruction>
        <instruction val="kandnd">Bitwise Logical AND NOT Masks</instruction>
        <instruction val="kandnq">Bitwise Logical AND NOT Masks</instruction>
        <instruction val="kandnw">Bitwise Logical AND NOT Masks</instruction>
        <instruction val="kmovb">Move from and to Mask Registers</instruction>
        <instruction val="kmovd">Move from and to Mask Registers</instruction>
        <instruction val="kmovq">Move from and to Mask Registers</instruction>
        <instruction val="kmovw">Move from and to Mask Registers</instruction>
        <instruction val="knotb">NOT Mask Register</instruction>
        <instruction val="knotd">NOT Mask Register</instruction>
        <instruction val="knotq">NOT Mask Register</instruction>
        <instruction val="knotw">NOT Mask Register</instruction>
        <instruction val="korb">Bitwise Logical OR Masks</instruction>
        <instruction val="kord">Bitwise Logical OR Masks</instruction>
        <instruction val="korq">Bitwise Logical OR Masks</instruction>
        <instruction val="korw">Bitwise Logical OR Masks</instruction>
        <instruction val="kortestb">OR Masks And Set Flags</instruction>
        <instruction val="kortestd">OR Masks And Set Flags</instruction>
        <instruction val="kortestq">OR Masks And Set Flags</instruction>
        <instruction val="kortestw">OR Masks And Set Flags</instruction>
        <instruction val="kshiftlb">Shift Left Mask Registers</instruction>
        <instruction val="kshiftld">Shift Left Mask Registers</instruction>
        <instruction val="kshiftlq">Shift Left Mask Registers</instruction>
        <instruction val="kshiftlw">Shift Left Mask Registers</instruction>
        <instruction val="kshiftrb">Shift Right Mask Registers</instruction>
        <instruction val="kshiftrd">Shift Right Mask Registers</instruction>
        <instruction val="kshiftrq">Shift Right Mask Registers</instruction>
        <instruction val="kshiftrw">Shift Right Mask Registers</instruction>
        <instruction val="ktestb">Packed Bit Test Masks and Set Flags</instruction>
        <instruction val="ktestd">Packed Bit Test Masks and Set Flags</instruction>
        <instruction val="ktestq">Packed Bit Test Masks and Set Flags</instruction>
        <instruction val="ktestw">Packed Bit Test Masks and Set Flags</instruction>
        <instruction val="kunpckbw">Unpack for Mask Registers</instruction>
        <instruction val="kunpckdq">Unpack for Mask Registers</instruction>
        <instruction val="kunpckwd">Unpack for Mask Registers</instruction>
        <instruction val="kxnorb">Bitwise Logical XNOR Masks</instruction>
        <instruction val="kxnord">Bitwise Logical XNOR Masks</instruction>
        <instruction val="kxnorq">Bitwise Logical XNOR Masks</instruction>
        <instruction val="kxnorw">Bitwise Logical XNOR Masks</instruction>
        <instruction val="kxorb">Bitwise Logical XOR Masks</instruction>
        <instruction val="kxord">Bitwise Logical XOR Masks</instruction>
        <instruction val="kxorq">Bitwise Logical XOR Masks</instruction>
        <instruction val="kxorw">Bitwise Logical XOR Masks</instruction>
        <instruction val="lahf">Load Status Flags into AH Register</instruction>
        <instruction val="lar">Load Access Rights Byte</instruction>
        <instruction val="lddqu">Load Unaligned Integer 128 Bits</instruction>
        <instruction val="ldmxcsr">Load MXCSR Register</instruction>
        <instruction val="lds">Load Far Pointer</instruction>
        <instruction val="les">Load Far Pointer</instruction>
        <instruction val="lfs">Load Far Pointer</instruction>
        <instruction val="lgs">Load Far Pointer</instruction>
        <instruction val="lss">Load Far Pointer</instruction>
        <instruction val="lea">Load Effective Address</instruction>
        <instruction val="leave">High Level Procedure Exit</instruction>
        <instruction val="lfence">Load Fence</instruction>
        <instruction val="lgdt">Load Global Descriptor Table Register</instruction>
        <instruction val="lidt">Load Interrupt Descriptor Table Register</instruction>
        <instruction val="lldt">Load Local Descriptor Table Register</instruction>
        <instruction val="lmsw">Load Machine Status Word</instruction>
        <instruction val="lock">Assert LOCK# Signal Prefix</instruction>
        <instruction val="lods">Load String</instruction>
        <instruction val="lodsb">Load String</instruction>
        <instruction val="lodsw">Load String</instruction>
        <instruction val="lodsd">Load String</instruction>
        <instruction val="lodsq">Load String</instruction>
        <instruction val="loop">Loop According to ECX Counter</instruction>
        <instruction val="loope">Loop According to ECX Counter</instruction>
        <instruction val="loopne">Loop According to ECX Counter</instruction>
        <instruction val="lsl">Load Segment Limit</instruction>
        <instruction val="ltr">Load Task Register</instruction>
        <instruction val="lzcnt">Count the Number of Leading Zero Bits</instruction>
        <instruction val="maskmovdqu">Store Selected Bytes of Double Quadword</instruction>
        <instruction val="maskmovq">Store Selected Bytes of Quadword</instruction>
        <instruction val="maxpd">Maximum of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="maxps">Maximum of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="maxsd">Return Maximum Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="maxss">Return Maximum Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="mfence">Memory Fence</instruction>
        <instruction val="minpd">Minimum of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="minps">Minimum of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="minsd">Return Minimum Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="minss">Return Minimum Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="monitor">Set Up Monitor Address</instruction>
        <instruction val="mov">Move</instruction>
        <instruction val="movapd">Move Aligned Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="movaps">Move Aligned Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="movbe">Move Data After Swapping Bytes</instruction>
        <instruction val="movd">Move Doubleword/Move Quadword</instruction>
        <instruction val="movddup">Replicate Double FP Values</instruction>        
        <instruction val="movdqa">Move Aligned Packed Integer Values</instruction>
        <instruction val="vmovdqa32">Move Aligned Packed Integer Values</instruction>
        <instruction val="vmovdqa64">Move Aligned Packed Integer Values</instruction>
        <instruction val="movdqu">Move Unaligned Packed Integer Values</instruction>
        <instruction val="vmovdqu8">Move Unaligned Packed Integer Values</instruction>
        <instruction val="vmovdqu16">Move Unaligned Packed Integer Values</instruction>
        <instruction val="vmovdqu32">Move Unaligned Packed Integer Values</instruction>
        <instruction val="vmovdqu64">Move Unaligned Packed Integer Values</instruction>
        <instruction val="movdq2q">Move Quadword from XMM to MMX Technology Register</instruction>
        <instruction val="movhlps">Move Packed Single-Precision Floating-Point Values High to Low</instruction>
        <instruction val="movhpd">Move High Packed Double-Precision Floating-Point Value</instruction>
        <instruction val="movhps">Move High Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="movlhps">Move Packed Single-Precision Floating-Point Values Low to High</instruction>
        <instruction val="movlpd">Move Low Packed Double-Precision Floating-Point Value</instruction>
        <instruction val="movlps">Move Low Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="movmskpd">Extract Packed Double-Precision Floating-Point Sign Mask</instruction>
        <instruction val="movmskps">Extract Packed Single-Precision Floating-Point Sign Mask</instruction>
        <instruction val="movntdq">Store Packed Integers Using Non-Temporal Hint</instruction>
        <instruction val="movntdqa">Load Double Quadword Non-Temporal Aligned Hint</instruction>
        <instruction val="movnti">Store Doubleword Using Non-Temporal Hint</instruction>
        <instruction val="movntpd">Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint</instruction>
        <instruction val="movntps">Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint</instruction>
        <instruction val="movntq">Store of Quadword Using Non-Temporal Hint</instruction>
        <instruction val="movq">Move Quadword</instruction>
        <instruction val="movq2dq">Move Quadword from MMX Technology to XMM Register</instruction>
        <instruction val="movs">Move Data from String to String</instruction>
        <instruction val="movsb">Move Data from String to String</instruction>
        <instruction val="movsw">Move Data from String to String</instruction>
        <instruction val="movsd">Move Data from String to String or Move or Merge Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="movsq">Move Data from String to String</instruction>
        <instruction val="movshdup">Replicate Single FP Values</instruction>
        <instruction val="movsldup">Replicate Single FP Values</instruction>
        <instruction val="movss">Move or Merge Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="movsx">Move with Sign-Extension</instruction>
        <instruction val="movsxd">Move with Sign-Extension</instruction>
        <instruction val="movupd">Move Unaligned Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="movups">Move Unaligned Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="movzx">Move with Zero-Extend</instruction>
        <instruction val="mpsadbw">Compute Multiple Packed Sums of Absolute Difference</instruction>
        <instruction val="mul">Unsigned Multiply</instruction>
        <instruction val="mulpd">Multiply Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="mulps">Multiply Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="mulsd">Multiply Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="mulss">Multiply Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="mulx">Unsigned Multiply Without Affecting Flags</instruction>
        <instruction val="mwait">Monitor Wait</instruction>
        <instruction val="neg">Two's Complement Negation</instruction>
        <instruction val="nop">No Operation</instruction>
        <instruction val="not">One's Complement Negation</instruction>
        <instruction val="or">Logical Inclusive OR</instruction>
        <instruction val="orpd">Bitwise Logical OR of Packed Double Precision Floating-Point Values</instruction>
        <instruction val="orps">Bitwise Logical OR of Packed Single Precision Floating-Point Values</instruction>
        <instruction val="out">Output to Port</instruction>
        <instruction val="outs">Output String to Port</instruction>
        <instruction val="outsb">Output String to Port</instruction>
        <instruction val="outsw">Output String to Port</instruction>
        <instruction val="outsd">Output String to Port</instruction>
        <instruction val="pabsb">Packed Absolute Value</instruction>
        <instruction val="pabsw">Packed Absolute Value</instruction>
        <instruction val="pabsd">Packed Absolute Value</instruction>
        <instruction val="packsswb">Pack with Signed Saturation</instruction>
        <instruction val="packssdw">Pack with Signed Saturation</instruction>
        <instruction val="packusdw">Pack with Unsigned Saturation</instruction>
        <instruction val="packuswb">Pack with Unsigned Saturation</instruction>
        <instruction val="paddb">Add Packed Integers</instruction>
        <instruction val="paddw">Add Packed Integers</instruction>
        <instruction val="paddd">Add Packed Integers</instruction>
        <instruction val="paddq">Add Packed Integers</instruction>
        <instruction val="paddsb">Add Packed Unsigned Integers with Signed Saturation</instruction>
        <instruction val="paddsw">Add Packed Unsigned Integers with Signed Saturation</instruction>
        <instruction val="paddusb">Add Packed Unsigned Integers with Unsigned Saturation</instruction>
        <instruction val="paddusw">Add Packed Unsigned Integers with Unsigned Saturation</instruction>
        <instruction val="palignr">Packed Align Right</instruction>
        <instruction val="pand">Logical AND</instruction>
        <instruction val="pandn">Logical AND NOT</instruction>
        <instruction val="pause">Spin Loop Hint</instruction>
        <instruction val="pavgb">Average Packed Integers</instruction>
        <instruction val="pavgw">Average Packed Integers</instruction>
        <instruction val="pblendvb">Variable Blend Packed Bytes</instruction>
        <instruction val="pblendw">Blend Packed Words</instruction>
        <instruction val="pclmulqdq">Carry-Less Multiplication Quadword</instruction>
        <instruction val="pcmpeqb">Compare Packed Data for Equal</instruction>
        <instruction val="pcmpeqw">Compare Packed Data for Equal</instruction>
        <instruction val="pcmpeqd">Compare Packed Data for Equal</instruction>
        <instruction val="pcmpeqq">Compare Packed Data for Equal</instruction>
        <instruction val="pcmpestri">Packed Compare Explicit Length Strings, Return Index</instruction>
        <instruction val="pcmpestrm">Packed Compare Explicit Length Strings, Return Mask</instruction>
        <instruction val="pcmpgtb">Compare Packed Signed Integers for Greater Than</instruction>
        <instruction val="pcmpgtw">Compare Packed Signed Integers for Greater Than</instruction>
        <instruction val="pcmpgtd">Compare Packed Signed Integers for Greater Than</instruction>
        <instruction val="pcmpgtq">Compare Packed Signed Integers for Greater Than</instruction>
        <instruction val="pcmpistri">Packed Compare Implicit Length Strings, Return Index</instruction>
        <instruction val="pcmpistrm">Packed Compare Implicit Length Strings, Return Mask</instruction>
        <instruction val="pdep">Parallel Bits Deposit</instruction>
        <instruction val="pext">Parallel Bits Extract</instruction>
        <instruction val="pextrb">Extract Byte</instruction>
        <instruction val="pextrd">Extract Dword</instruction>
        <instruction val="pextrq">Extract Qword</instruction>
        <instruction val="pextrw">Extract Word</instruction>
        <instruction val="vpextrb">Extract Byte</instruction>
        <instruction val="vpextrd">Extract Dword</instruction>
        <instruction val="vpextrq">Extract Qword</instruction>
        <instruction val="vpextrw">Extract Word</instruction>
        <instruction val="phaddw">Packed Horizontal Add</instruction>
        <instruction val="phaddd">Packed Horizontal Add</instruction>
        <instruction val="phaddsw">Packed Horizontal Add and Saturate</instruction>
        <instruction val="phminposuw">Packed Horizontal Word Minimum</instruction>
        <instruction val="phsubw">Packed Horizontal Subtract</instruction>
        <instruction val="phsubd">Packed Horizontal Subtract</instruction>
        <instruction val="phsubsw">Packed Horizontal Subtract and Saturate</instruction>
        <instruction val="pinsrb">Insert Byte</instruction>
        <instruction val="pinsrd">Insert Dword</instruction>
        <instruction val="pinsrw">Insert Word</instruction>
        <instruction val="pinsrq">Insert Qword</instruction>
        <instruction val="pmaddubsw">Multiply and Add Packed Signed and Unsigned Bytes</instruction>
        <instruction val="pmaddwd">Multiply and Add Packed Integers</instruction>
        <instruction val="pmaxsb">Maximum of Packed Signed Integers</instruction>
        <instruction val="pmaxsd">Maximum of Packed Signed Integers</instruction>
        <instruction val="pmaxsq">Maximum of Packed Signed Integers</instruction>
        <instruction val="pmaxsw">Maximum of Packed Signed Integers</instruction>
        <instruction val="pmaxub">Maximum of Packed Unsigned Integers</instruction>
        <instruction val="pmaxud">Maximum of Packed Unsigned Integers</instruction>
        <instruction val="pmaxuq">Maximum of Packed Unsigned Integers</instruction>
        <instruction val="pmaxuw">Maximum of Packed Unsigned Integers</instruction>
        <instruction val="pminsb">Minimum of Packed Signed Integers</instruction>
        <instruction val="pminsd">Minimum of Packed Signed Integers</instruction>
        <instruction val="pminsq">Minimum of Packed Signed Integers</instruction>
        <instruction val="pminsw">Minimum of Packed Signed Integers</instruction>
        <instruction val="pminub">Minimum of Packed Unsigned Integers</instruction>
        <instruction val="pminud">Minimum of Packed Unsigned Integers</instruction>
        <instruction val="pminuq">Minimum of Packed Unsigned Integers</instruction>
        <instruction val="pminuw">Minimum of Packed Unsigned Integers</instruction>
        <instruction val="pmovmskb">Move Byte Mask</instruction>
        <instruction val="pmovsx">Packed Move with Sign Extend</instruction>
        <instruction val="pmovzx">Packed Move with Zero Extend</instruction>
        <instruction val="pmuldq">Multiply Packed Doubleword Integers</instruction>
        <instruction val="pmulhrsw">Packed Multiply High with Round and Scale</instruction>
        <instruction val="pmulhuw">Multiply Packed Unsigned Integers and Store High Result</instruction>
        <instruction val="pmulhw">Multiply Packed Signed Integers and Store High Result</instruction>
        <instruction val="pmulld">Multiply Packed Integers and Store Low Result</instruction>
        <instruction val="pmullq">Multiply Packed Integers and Store Low Result</instruction>
        <instruction val="pmullw">Multiply Packed Signed Integers and Store Low Result</instruction>
        <instruction val="pmuludq">Multiply Packed Unsigned Doubleword Integers</instruction>
        <instruction val="pop">Pop a Value from the Stack</instruction>
        <instruction val="popa">Pop All General-Purpose Registers</instruction>
        <instruction val="popad">Pop All General-Purpose Registers</instruction>
        <instruction val="popcnt">Return the Count of Number of Bits Set to 1</instruction>
        <instruction val="popf">Pop Stack into EFLAGS Register</instruction>
        <instruction val="popfd">Pop Stack into EFLAGS Register</instruction>
        <instruction val="popfq">Pop Stack into EFLAGS Register</instruction>
        <instruction val="por">Bitwise Logical OR</instruction>
        <instruction val="prefetch0">Prefetch Data Into Caches</instruction>
        <instruction val="prefetch1">Prefetch Data Into Caches</instruction>
        <instruction val="prefetch2">Prefetch Data Into Caches</instruction>
        <instruction val="prefetchnta">Prefetch Data Into Caches</instruction>
        <instruction val="prefetchw">Prefetch Data into Caches in Anticipation of a Write</instruction>
        <instruction val="prefetchwt1">Prefetch Vector Data Into Caches with Intent to Write and T1 Hint</instruction>
        <instruction val="psadbw">Compute Sum of Absolute Differences</instruction>
        <instruction val="pshufb">Packed Shuffle Bytes</instruction>
        <instruction val="pshufd">Shuffle Packed Doublewords</instruction>
        <instruction val="pshufhw">Shuffle Packed High Words</instruction>
        <instruction val="pshuflw">Shuffle Packed Low Words</instruction>
        <instruction val="pshufw">Shuffle Packed Words</instruction>
        <instruction val="psignb">Packed SIGN</instruction>
        <instruction val="psignw">Packed SIGN</instruction>
        <instruction val="psignd">Packed SIGN</instruction>
        <instruction val="pslldq">Shift Double Quadword Left Logical</instruction>
        <instruction val="psllw">Shift Packed Data Left Logical</instruction>
        <instruction val="pslld">Shift Packed Data Left Logical</instruction>
        <instruction val="psllq">Shift Packed Data Left Logical</instruction>
        <instruction val="psraw">Shift Packed Data Right Arithmetic</instruction>
        <instruction val="psrad">Shift Packed Data Right Arithmetic</instruction>
        <instruction val="psraq">Shift Packed Data Right Arithmetic</instruction>
        <instruction val="psrldq">Shift Double Quadword Right Logical</instruction>
        <instruction val="psrlw">Shift Packed Data Right Logical</instruction>
        <instruction val="psrld">Shift Packed Data Right Logical</instruction>
        <instruction val="psrlq">Shift Packed Data Right Logical</instruction>
        <instruction val="psubb">Subtract Packed Integers</instruction>
        <instruction val="psubw">Subtract Packed Integers</instruction>
        <instruction val="psubd">Subtract Packed Integers</instruction>
        <instruction val="psubq">Subtract Packed Quadword Integers</instruction>
        <instruction val="psubsb">Subtract Packed Signed Integers with Signed Saturation</instruction>
        <instruction val="psubsw">Subtract Packed Signed Integers with Signed Saturation</instruction>
        <instruction val="psubusb">Subtract Packed Unsigned Integers with Unsigned Saturation</instruction>
        <instruction val="psubusw">Subtract Packed Unsigned Integers with Unsigned Saturation</instruction>
        <instruction val="ptest">Logical Compare</instruction>
        <instruction val="ptwrite">Write Data to a Processor Trace Packet</instruction>
        <instruction val="punpckhbw">Unpack High Data</instruction>
        <instruction val="punpckhwd">Unpack High Data</instruction>
        <instruction val="punpckhhdq">Unpack High Data</instruction>
        <instruction val="punpckhqdq">Unpack High Data</instruction>
        <instruction val="punpcklbw">Unpack Low Data</instruction>
        <instruction val="punpcklwd">Unpack Low Data</instruction>
        <instruction val="punpckldq">Unpack Low Data</instruction>
        <instruction val="punpcklqdq">Unpack Low Data</instruction>
        <instruction val="push">Push Word, Doubleword or Quadword Onto the Stack</instruction>
        <instruction val="pusha">Push All General-Purpose Registers</instruction>
        <instruction val="pushad">Push All General-Purpose Registers</instruction>
        <instruction val="pushf">Push EFLAGS Register onto the Stack</instruction>
        <instruction val="pushfd">Push EFLAGS Register onto the Stack</instruction>
        <instruction val="pushfq">Push RFLAGS Register onto the Stack</instruction>
        <instruction val="pxor">Logical Exclusive OR</instruction>
        <instruction val="rcl">Rotate</instruction>
        <instruction val="rcr">Rotate</instruction>
        <instruction val="rol">Rotate</instruction>
        <instruction val="ror">Rotate</instruction>
        <instruction val="rcpps">Compute Reciprocals of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="rcpss">Compute Reciprocal of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="rdfsbase">Read FS Segment Base</instruction>
        <instruction val="rdgsbase">Read GS Segment Base</instruction>
        <instruction val="rdmsr">Read from Model Specific Register</instruction>
        <instruction val="rdpid">Read Processor ID</instruction>
        <instruction val="rdpkru">Read Protection Key Rights for User Pages</instruction>
        <instruction val="rdpmc">Read Performance-Monitoring Counters</instruction>
        <instruction val="rdrand">Read Random Number</instruction>
        <instruction val="rdseed">Read Random SEED</instruction>
        <instruction val="rdtsc">Read Time-Stamp Counter</instruction>
        <instruction val="rdtscp">Read Time-Stamp Counter and Processor ID</instruction>
        <instruction val="rep">Repeat String Operation Prefix</instruction>
        <instruction val="repe">Repeat String Operation Prefix</instruction>
        <instruction val="repz">Repeat String Operation Prefix</instruction>
        <instruction val="repne">Repeat String Operation Prefix</instruction>
        <instruction val="repnz">Repeat String Operation Prefix</instruction>
        <instruction val="ret">Return from Procedure</instruction>
        <instruction val="rorx">Rotate Right Logical Without Affecting Flags</instruction>
        <instruction val="roundpd">Round Packed Double Precision Floating-Point Values</instruction>
        <instruction val="roundps">Round Packed Single Precision Floating-Point Values</instruction>
        <instruction val="roundsd">Round Scalar Double Precision Floating-Point Values</instruction>
        <instruction val="roundss">Round Scalar Single Precision Floating-Point Values</instruction>
        <instruction val="rsm">Resume from System Management Mode</instruction>
        <instruction val="rsqrtps">Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="rsqrtss">Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="sahf">Store AH into Flags</instruction>
        <instruction val="sal">Shift</instruction>
        <instruction val="sar">Shift</instruction>
        <instruction val="shl">Shift</instruction>
        <instruction val="shr">Shift</instruction>
        <instruction val="sarx">Shift Without Affecting Flags</instruction>
        <instruction val="shlx">Shift Without Affecting Flags</instruction>
        <instruction val="shrx">Shift Without Affecting Flags</instruction>
        <instruction val="sbb">Integer Subtraction with Borrow</instruction>
        <instruction val="scas">Scan String</instruction>
        <instruction val="scasb">Scan String</instruction>
        <instruction val="scasw">Scan String</instruction>
        <instruction val="scasd">Scan String</instruction>
        <instruction val="seta">Set Byte on Condition</instruction>
        <instruction val="setae">Set Byte on Condition</instruction>
        <instruction val="setb">Set Byte on Condition</instruction>
        <instruction val="setbe">Set Byte on Condition</instruction>
        <instruction val="setc">Set Byte on Condition</instruction>
        <instruction val="sete">Set Byte on Condition</instruction>
        <instruction val="setg">Set Byte on Condition</instruction>
        <instruction val="setge">Set Byte on Condition</instruction>
        <instruction val="setl">Set Byte on Condition</instruction>
        <instruction val="setle">Set Byte on Condition</instruction>
        <instruction val="setna">Set Byte on Condition</instruction>
        <instruction val="setnae">Set Byte on Condition</instruction>
        <instruction val="setnb">Set Byte on Condition</instruction>
        <instruction val="setnbe">Set Byte on Condition</instruction>
        <instruction val="setnc">Set Byte on Condition</instruction>
        <instruction val="setne">Set Byte on Condition</instruction>
        <instruction val="setng">Set Byte on Condition</instruction>
        <instruction val="setnge">Set Byte on Condition</instruction>
        <instruction val="setnl">Set Byte on Condition</instruction>
        <instruction val="setnle">Set Byte on Condition</instruction>
        <instruction val="setno">Set Byte on Condition</instruction>
        <instruction val="setnp">Set Byte on Condition</instruction>
        <instruction val="setns">Set Byte on Condition</instruction>
        <instruction val="setnz">Set Byte on Condition</instruction>
        <instruction val="seto">Set Byte on Condition</instruction>
        <instruction val="setp">Set Byte on Condition</instruction>
        <instruction val="setpe">Set Byte on Condition</instruction>
        <instruction val="setpo">Set Byte on Condition</instruction>
        <instruction val="sets">Set Byte on Condition</instruction>
        <instruction val="setz">Set Byte on Condition</instruction>
        <instruction val="sfence">Store Fence</instruction>
        <instruction val="sgdt">Store Global Descriptor Table Register</instruction>
        <instruction val="sha1rnds4">Perform Four Rounds of SHA1 Operation</instruction>
        <instruction val="sha1nexte">Calculate SHA1 State Variable E after Four Rounds</instruction>
        <instruction val="sha1msg1">Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords</instruction>
        <instruction val="sha1msg2">Perform a Final Calculation for the Next Four SHA1 Message Dwords</instruction>
        <instruction val="sha256rnd32">Perform Two Rounds of SHA256 Operation</instruction>
        <instruction val="sha256msg1">Perform an Intermediate Calculation for the Next Four SHA256 Message Dwords</instruction>
        <instruction val="sha256msg2">Perform a Final Calculation for the Next Four SHA256 Message Dwords</instruction>
        <instruction val="shld">Double Precision Shift Left</instruction>
        <instruction val="shrd">Double Precision Shift Right</instruction>
        <instruction val="shufpd">Packed Interleave Shuffle of Pairs of Double-Precision Floating-Point Values</instruction>
        <instruction val="shufps">Packed Interleave Shuffle of Quadruplets of Single-Precision Floating-Point Values</instruction>
        <instruction val="sidt">Store Interrupt Descriptor Table Register</instruction>
        <instruction val="sldt">Store Local Descriptor Table Register</instruction>
        <instruction val="smsw">Store Machine Status Word</instruction>
        <instruction val="sqrtpd">Square Root of Double-Precision Floating-Point Values</instruction>
        <instruction val="sqrtps">Square Root of Single-Precision Floating-Point Values</instruction>
        <instruction val="sqrtsd">Compute Square Root of Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="sqrtss">Compute Square Root of Scalar Single-Precision Value</instruction>
        <instruction val="stac">Set AC Flag in EFLAGS Register</instruction>
        <instruction val="stc">Set Carry Flag</instruction>
        <instruction val="std">Set Direction Flag</instruction>
        <instruction val="sti">Set Interrupt Flag</instruction>
        <instruction val="stmxcsr">Store MXCSR Register State</instruction>
        <instruction val="stos">Store String</instruction>
        <instruction val="stosb">Store String</instruction>
        <instruction val="stosw">Store String</instruction>
        <instruction val="stosd">Store String</instruction>
        <instruction val="stosq">Store String</instruction>
        <instruction val="str">Store Task Register</instruction>
        <instruction val="sub">Subtract</instruction>
        <instruction val="subpd">Subtract Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="subps">Subtract Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="subsd">Subtract Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="subss">Subtract Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="swapgs">Swap GS Base Register</instruction>
        <instruction val="syscall">Fast System Call</instruction>
        <instruction val="sysenter">Fast System Call</instruction>
        <instruction val="sysexit">Fast Return from Fast System Call</instruction>
        <instruction val="sysret">Return From Fast System Call</instruction>
        <instruction val="test">Logical Compare</instruction>
        <instruction val="tzcnt">Count the Number of Trailing Zero Bits</instruction>
        <instruction val="ucomisd">Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS</instruction>
        <instruction val="ucomiss">Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS</instruction>
        <instruction val="ud2">Undefined Instruction</instruction>
        <instruction val="unpckhpd">Unpack and Interleave High Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="unpckhps">Unpack and Interleave High Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="unpcklpd">Unpack and Interleave Low Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="unpcklps">Unpack and Interleave Low Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="valignd">Align Doubleword Vectors</instruction>
        <instruction val="valignq">Align Quadword Vectors</instruction>
        <instruction val="vblendmpd">Blend Float64/Float32 Vectors Using an OpMask Control</instruction>
        <instruction val="vblendmps">Blend Float64/Float32 Vectors Using an OpMask Control</instruction>
        <instruction val="vbroadcast">Load with Broadcast Floating-Point Data</instruction>
        <instruction val="vbroadcastm">Broadcast Mask to Vector Register</instruction>
        <instruction val="vcompresspd">Store Sparse Packed Double-Precision Floating-Point Values into Dense Memory</instruction>
        <instruction val="vcompressps">Store Sparse Packed Single-Precision Floating-Point Values into Dense Memory</instruction>
        <instruction val="vcvtpd2qq">Convert Packed Double-Precision Floating-Point Values to Packed Quadword Integers</instruction>
        <instruction val="vcvtpd2udq">Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers</instruction>
        <instruction val="vcvtpd2uqq">Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers</instruction>
        <instruction val="vcvtph2ps">Convert 16-bit FP values to Single-Precision FP values</instruction>
        <instruction val="vcvtps2ph">Convert Single-Precision FP value to 16-bit FP value</instruction>
        <instruction val="vcvtps2qq">Convert Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values</instruction>
        <instruction val="vcvtps2udq">Convert Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values</instruction>
        <instruction val="vcvtps2uqq">Convert Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values</instruction>
        <instruction val="vcvtqq2pd">Convert Packed Quadword Integers to Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vcvtqq2ps">Convert Packed Quadword Integers to Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vcvtsd2usi">Convert Scalar Double-Precision Floating-Point Value to Unsigned Doubleword Integer</instruction>
        <instruction val="vcvtss2usi">Convert Scalar Single-Precision Floating-Point Value to Unsigned Doubleword Integer</instruction>
        <instruction val="vcvttpd2qq">Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Quadword Integers</instruction>
        <instruction val="vcvttpd2udq">Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers</instruction>
        <instruction val="vcvttpd2uqq">Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers</instruction>
        <instruction val="vcvttps2dq">Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values</instruction>
        <instruction val="vcvttps2qq">Convert with Truncation Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values</instruction>
        <instruction val="vcvttps2uqq">Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values</instruction>
        <instruction val="vcvttsd2usi">Convert with Truncation Scalar Double-Precision Floating-Point Value to Unsigned Integer</instruction>
        <instruction val="vcvttss2usi">Convert with Truncation Scalar Single-Precision Floating-Point Value to Unsigned Integer</instruction>
        <instruction val="vcvtudq2pd">Convert Packed Unsigned Doubleword Integers to Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vcvtudq2ps">Convert Packed Unsigned Doubleword Integers to Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vcvtuqq2pd">Convert Packed Unsigned Quadword Integers to Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vcvtuqq2ps">Convert Packed Unsigned Quadword Integers to Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vcvtusi2sd">Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value</instruction>
        <instruction val="vcvtusi2ss">Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value</instruction>
        <instruction val="vdbpsadbw">Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes</instruction>
        <instruction val="vexpandpd">Load Sparse Packed Double-Precision Floating-Point Values from Dense Memory</instruction>
        <instruction val="vexpandps">Load Sparse Packed Single-Precision Floating-Point Values from Dense Memory</instruction>
        <instruction val="verr">Verify a Segment for Reading</instruction>
        <instruction val="verw">Verify a Segment for Writing</instruction>
        <instruction val="vexp2pd">Approximation to the Exponential 2^x of Packed Double-Precision Floating-Point Values with Less Than 2^-23 Relative Error</instruction>
        <instruction val="vexp2ps">Approximation to the Exponential 2^x of Packed Single-Precision Floating-Point Values with Less Than 2^-23 Relative Error</instruction>
        <instruction val="vextractf128">Extract Packed Floating-Point Values</instruction>
        <instruction val="vextractf32x4">Extract Packed Floating-Point Values</instruction>
        <instruction val="vextractf64x2">Extract Packed Floating-Point Values</instruction>
        <instruction val="vextractf32x8">Extract Packed Floating-Point Values</instruction>
        <instruction val="vextractf64x4">Extract Packed Floating-Point Values</instruction>
        <instruction val="vextracti128">Extract packed Integer Values</instruction>
        <instruction val="vextracti32x4">Extract packed Integer Values</instruction>
        <instruction val="vextracti64x2">Extract packed Integer Values</instruction>
        <instruction val="vextracti32x8">Extract packed Integer Values</instruction>
        <instruction val="vextracti64x4">Extract packed Integer Values</instruction>
        <instruction val="vfixupimmpd">Fix Up Special Packed Float64 Values</instruction>
        <instruction val="vfixupimmps">Fix Up Special Packed Float32 Values</instruction>
        <instruction val="vfixupimmsd">Fix Up Special Scalar Float64 Value</instruction>
        <instruction val="vfixupimmss">Fix Up Special Scalar Float32 Value</instruction>
        <instruction val="vfmadd132pd">Fused Multiply-Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd213pd">Fused Multiply-Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd231pd">Fused Multiply-Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd132ps">Fused Multiply-Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd213ps">Fused Multiply-Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd231ps">Fused Multiply-Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd132sd">Fused Multiply-Add of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd213sd">Fused Multiply-Add of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd231sd">Fused Multiply-Add of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd132ss">Fused Multiply-Add of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd213ss">Fused Multiply-Add of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmadd231ss">Fused Multiply-Add of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmaddsub132pd">Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmaddsub213pd">Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmaddsub231pd">Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmaddsub132ps">Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmaddsub213ps">Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmaddsub231ps">Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub132pd">Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub213pd">Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub231pd">Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub132ps">Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub213ps">Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub231ps">Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub132sd">Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub213sd">Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub231sd">Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub132ss">Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub213ss">Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsub231ss">Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsubadd132pd">Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsubadd213pd">Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsubadd231pd">Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfmsubadd132ps">Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsubadd213ps">Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfmsubadd231ps">Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd132pd">Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd213pd">Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd231pd">Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd132ps">Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd213ps">Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd231ps">Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd132sd">Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd213sd">Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd231sd">Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd132ss">Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd213ss">Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmadd231ss">Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub132pd">Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub213pd">Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub231pd">Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub132ps">Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub213ps">Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub231ps">Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub132sd">Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub213sd">Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub231sd">Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub132ss">Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub213ss">Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values</instruction>
        <instruction val="vfnmsub231ss">Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values</instruction>  
        <instruction val="vfpclasspd">Tests Types Of a Packed Float64 Values</instruction>
        <instruction val="vfpclassps">Tests Types Of a Packed Float32 Values</instruction>
        <instruction val="vfpclasssd">Tests Types Of a Scalar Float64 Values</instruction>
        <instruction val="vfpclassss">Tests Types Of a Scalar Float32 Values</instruction>
        <instruction val="vgatherdpd">Gather Packed DP FP Values Using Signed Dword/Qword Indices</instruction>
        <instruction val="vgatherqpd">Gather Packed DP FP Values Using Signed Dword/Qword Indices</instruction>
        <instruction val="vgatherdps">Gather Packed SP FP values Using Signed Dword/Qword Indices</instruction>
        <instruction val="vgatherqps">Gather Packed SP FP values Using Signed Dword/Qword Indices</instruction>
        <instruction val="vgatherpf0dps">Sparse Prefetch Packed SP/DP Data Values with Signed Dword Indices Using T0 Hint</instruction>
        <instruction val="vgatherpf0qps">Sparse Prefetch Packed SP/DP Data Values with Signed Qword Indices Using T0 Hint</instruction>
        <instruction val="vgatherpf0dpd">Sparse Prefetch Packed SP/DP Data Values with Signed Dword Indices Using T0 Hint</instruction>
        <instruction val="vgatherpf0qpd">Sparse Prefetch Packed SP/DP Data Values with Signed Qword Indices Using T0 Hint</instruction>
        <instruction val="vgatherpf1dps">Sparse Prefetch Packed SP/DP Data Values with Signed Dword Indices Using T1 Hint</instruction>
        <instruction val="vgatherpf1qps">Sparse Prefetch Packed SP/DP Data Values with Signed Qword Indices Using T1 Hint</instruction>
        <instruction val="vgatherpf1dpd">Sparse Prefetch Packed SP/DP Data Values with Signed Dword Indices Using T1 Hint</instruction>
        <instruction val="vgatherpf1qpd">Sparse Prefetch Packed SP/DP Data Values with Signed Qword Indices Using T1 Hint</instruction>
        <instruction val="vpgatherdd">Gather Packed Dword Values Using Signed Dword Indices</instruction>
        <instruction val="vpgatherqd">Gather Packed Dword Values Using Signed Qword Indices</instruction>
        <instruction val="vpgatherdq">Gather Packed Qword Values Using Signed Dword Indices</instruction>
        <instruction val="vpgatherqq">Gather Packed Qword Values Using Signed Qword Indices</instruction>
        <instruction val="vgetexppd">Convert Exponents of Packed DP FP Values to DP FP Values</instruction>
        <instruction val="vgetexpps">Convert Exponents of Packed SP FP Values to SP FP Values</instruction>
        <instruction val="vgetexpsd">Convert Exponents of Scalar DP FP Values to DP FP Value</instruction>
        <instruction val="vgetexpss">Convert Exponents of Scalar SP FP Values to SP FP Value</instruction>
        <instruction val="vgetmantpd">Extract Float64 Vector of Normalized Mantissas from Float64 Vector</instruction>
        <instruction val="vgetmantps">Extract Float32 Vector of Normalized Mantissas from Float32 Vector</instruction>
        <instruction val="vgetmantsd">Extract Float64 of Normalized Mantissas from Float64 Scalar</instruction>
        <instruction val="vgetmantss">Extract Float32 Vector of Normalized Mantissa from Float32 Vector</instruction>
        <instruction val="vinsertf128">Insert Packed Integer Values</instruction>
        <instruction val="vinsertf32x4">Insert Packed Integer Values</instruction>
        <instruction val="vinsertf64x2">Insert Packed Integer Values</instruction>
        <instruction val="vinsertf32x8">Insert Packed Integer Values</instruction>
        <instruction val="vinsertf64x4">Insert Packed Integer Values</instruction>
        <instruction val="vinserti128">Insert Packed Integer Values</instruction>
        <instruction val="vinserti32x4">Insert Packed Integer Values</instruction>
        <instruction val="vinserti64x2">Insert Packed Integer Values</instruction>
        <instruction val="vinserti32x8">Insert Packed Integer Values</instruction>
        <instruction val="vinserti64x4">Insert Packed Integer Values</instruction>
        <instruction val="vmaskmov">Conditional SIMD Packed Loads and Stores</instruction>
        <instruction val="vpblend">Blend Packed Dwords</instruction>
        <instruction val="vpblendmb">Blend Byte Vectors Using an Opmask Control</instruction>
        <instruction val="vpblendmd">Blend Int32 Vectors Using an OpMask Control</instruction>
        <instruction val="vpblendmq">Blend Int64 Vectors Using an OpMask Control</instruction>
        <instruction val="vpblendmw">Blend Word Vectors Using an Opmask Control</instruction>
        <instruction val="vpbroadcast">Load Integer and Broadcast</instruction>
        <instruction val="vpbroadcastb">Load with Broadcast Integer Data from General Purpose Register</instruction>
        <instruction val="vpbroadcastd">Load with Broadcast Integer Data from General Purpose Register</instruction>
        <instruction val="vpbroadcastm">Broadcast Mask to Vector Register</instruction>
        <instruction val="vpbroadcastq">Load with Broadcast Integer Data from General Purpose Register</instruction>
        <instruction val="vpbroadcastw">Load with Broadcast Integer Data from General Purpose Register</instruction>
        <instruction val="vpcmpb">Compare Packed Byte Values Into Mask</instruction>
        <instruction val="vpcmpd">Compare Packed Integer Values into Mask</instruction>
        <instruction val="vpcmpq">Compare Packed Integer Values into Mask</instruction>
        <instruction val="vpcmpw">Compare Packed Word Values Into Mask</instruction>
        <instruction val="vpcmpub">Compare Packed Byte Values Into Mask</instruction>
        <instruction val="vpcmpud">Compare Packed Integer Values into Mask</instruction>
        <instruction val="vpcmpuq">Compare Packed Integer Values into Mask</instruction>
        <instruction val="vpcmpuw">Compare Packed Word Values Into Mask</instruction>
        <instruction val="vpcompressd">Store Sparse Packed Doubleword Integer Values into Dense Memory/Register</instruction>
        <instruction val="vpcompressq">Store Sparse Packed Quadword Integer Values into Dense Memory/Register</instruction>
        <instruction val="vpconflictd">Detect Conflicts Within a Vector of Packed Dword Values into Dense Memory/Register</instruction>
        <instruction val="vpconflictq">Detect Conflicts Within a Vector of Packed Qword Values into Dense Memory/Register</instruction>
        <instruction val="vperm2f128">Permute Floating-Point Values</instruction>
        <instruction val="vperm2i128">Permute Integer Values</instruction>
        <instruction val="vpermd">Permute Packed Doublewords Elements</instruction>
        <instruction val="vpermw">Permute Packed Words Elements</instruction>
        <instruction val="vpermi2d">Full Permute From Two Tables Overwriting the Index</instruction>
        <instruction val="vpermi2q">Full Permute From Two Tables Overwriting the Index</instruction>
        <instruction val="vpermi2w">Full Permute From Two Tables Overwriting the Index</instruction>
        <instruction val="vpermi2ps">Full Permute From Two Tables Overwriting the Index</instruction>
        <instruction val="vpermi2pd">Full Permute From Two Tables Overwriting the Index</instruction>
        <instruction val="vpermilpd">Permute In-Lane of Pairs of Double-Precision Floating-Point Values</instruction>
        <instruction val="vpermilps">Permute In-Lane of Quadruples of Single-Precision Floating-Point Values</instruction>
        <instruction val="vpermpd">Permute Double-Precision Floating-Point Elements</instruction>
        <instruction val="vpermps">Permute Single-Precision Floating-Point Elements</instruction>
        <instruction val="vpermq">Qwords Element Permutation</instruction>
        <instruction val="vpexpandd">Load Sparse Packed Doubleword Integer Values from Dense Memory / Register</instruction>
        <instruction val="vpexpandq">Load Sparse Packed Quadword Integer Values from Dense Memory / Register</instruction>
        <instruction val="vplzcntd">Count the Number of Leading Zero Bits for Packed Dword Values</instruction>
        <instruction val="vplzcntq">Count the Number of Leading Zero Bits for Packed Qword Values</instruction>
        <instruction val="vpmaskmov">Conditional SIMD Integer Packed Loads and Stores</instruction>
        <instruction val="vpmovm2b">Convert a Mask Register to a Vector Register</instruction>
        <instruction val="vpmovm2d">Convert a Mask Register to a Vector Register</instruction>
        <instruction val="vpmovm2q">Convert a Mask Register to a Vector Register</instruction>
        <instruction val="vpmovm2w">Convert a Mask Register to a Vector Register</instruction>
        <instruction val="vpmovb2m">Convert a Vector Register to a Mask</instruction>
        <instruction val="vpmovd2m">Convert a Vector Register to a Mask</instruction>
        <instruction val="vpmovq2m">Convert a Vector Register to a Mask</instruction>
        <instruction val="vpmovw2m">Convert a Vector Register to a Mask</instruction>
        <instruction val="vpmovqb">Down Convert QWord to Byte</instruction>
        <instruction val="vpmovsqb">Down Convert QWord to Byte</instruction>
        <instruction val="vpmovusqb">Down Convert QWord to Byte</instruction>
        <instruction val="vpmovqd">Down Convert QWord to DWord</instruction>
        <instruction val="vpmovsqd">Down Convert QWord to DWord</instruction>
        <instruction val="vpmovusqd">Down Convert QWord to DWord</instruction>
        <instruction val="vpmovqw">Down Convert QWord to Word</instruction>
        <instruction val="vpmovsqw">Down Convert QWord to Word</instruction>
        <instruction val="vpmovusqw">Down Convert QWord to Word</instruction>
        <instruction val="vpmovdb">Down Convert DWord to Byte</instruction>
        <instruction val="vpmovsdb">Down Convert DWord to Byte</instruction>
        <instruction val="vpmovusdb">Down Convert DWord to Byte</instruction>        
        <instruction val="vpmovdw">Down Convert DWord to Word</instruction>
        <instruction val="vpmovsdw">Down Convert DWord to Word</instruction>
        <instruction val="vpmovusdw">Down Convert DWord to Word</instruction>
        <instruction val="vpmovwb">Down Convert Word to Byte</instruction>
        <instruction val="vpmovswb">Down Convert Word to Byte</instruction>
        <instruction val="vpmovuswb">Down Convert Word to Byte</instruction>
        <instruction val="prold">Bit Rotate Left</instruction>
        <instruction val="prolvd">Bit Rotate Left</instruction>
        <instruction val="prolq">Bit Rotate Left</instruction>
        <instruction val="prolvq">Bit Rotate Left</instruction>
        <instruction val="prord">Bit Rotate Right</instruction>
        <instruction val="prorvd">Bit Rotate Right</instruction>
        <instruction val="prorq">Bit Rotate Right</instruction>
        <instruction val="prorvq">Bit Rotate Right</instruction>
        <instruction val="vpscatterdd">Scatter Packed Dword with Signed Dword Indices</instruction>
        <instruction val="vpscatterdq">Scatter Packed Dword with Signed Qword Indices</instruction>
        <instruction val="vpscatterqd">Scatter Packed Qword with Signed Dword Indices</instruction>
        <instruction val="vpscatterqq">Scatter Packed Qword with Signed Qword Indices</instruction>
        <instruction val="vpsllvd">Variable Bit Shift Left Logical</instruction>
        <instruction val="vpsllvq">Variable Bit Shift Left Logical</instruction>
        <instruction val="vpsllvw">Variable Bit Shift Left Logical</instruction>
        <instruction val="vpsravd">Variable Bit Shift Right Arithmetic</instruction>
        <instruction val="vpsravq">Variable Bit Shift Right Arithmetic</instruction>
        <instruction val="vpsravw">Variable Bit Shift Right Arithmetic</instruction>
        <instruction val="vpsrlvd">Variable Bit Shift Right Logical</instruction>
        <instruction val="vpsrlvq">Variable Bit Shift Right Logical</instruction>
        <instruction val="vpsrlvw">Variable Bit Shift Right Logical</instruction>
        <instruction val="vpternlogd">Bitwise Ternary Logic</instruction>
        <instruction val="vpternlogq">Bitwise Ternary Logic</instruction>
        <instruction val="vptestmb">Logical AND and Set Mask</instruction>
        <instruction val="vptestmd">Logical AND and Set Mask</instruction>
        <instruction val="vptestmq">Logical AND and Set Mask</instruction>
        <instruction val="vptestmw">Logical AND and Set Mask</instruction>
        <instruction val="vpternmb">Logical NAND and Set Mask</instruction>
        <instruction val="vpternmd">Logical NAND and Set Mask</instruction>
        <instruction val="vpternmq">Logical NAND and Set Mask</instruction>
        <instruction val="vpternmw">Logical NAND and Set Mask</instruction>
        <instruction val="vrangepd">Range Restriction Calculation For Packed Pairs of Float64 Values</instruction>
        <instruction val="vrangeps">Range Restriction Calculation For Packed Pairs of Float32 Values</instruction>
        <instruction val="vrangesd">Range Restriction Calculation From a pair of Scalar Float64 Values</instruction>
        <instruction val="vrangess">Range Restriction Calculation From a Pair of Scalar Float32 Values</instruction>
        <instruction val="vrcp14pd">Compute Approximate Reciprocals of Packed Float64 Values</instruction>
        <instruction val="vrcp14sd">Compute Approximate Reciprocal of Scalar Float64 Value</instruction>
        <instruction val="vrcp14ps">Compute Approximate Reciprocals of Packed Float32 Values</instruction>
        <instruction val="vrcp14ss">Compute Approximate Reciprocal of Scalar Float32 Value</instruction>
        <instruction val="vrcp28pd">Approximation to the Reciprocal of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error</instruction>
        <instruction val="vrcp28sd">Approximation to the Reciprocal of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error</instruction>
        <instruction val="vrcp28ps">Approximation to the Reciprocal of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error</instruction>
        <instruction val="vrcp28ss">Approximation to the Reciprocal of Scalar Single-Precision Floating-Point Value with Less Than 2^-28 Relative Error</instruction>
        <instruction val="vreducepd">Perform Reduction Transformation on Packed Float64 Values</instruction>
        <instruction val="vreducesd">Perform a Reduction Transformation on a Scalar Float64 Value</instruction>
        <instruction val="vreduceps">Perform Reduction Transformation on Packed Float32 Values</instruction>
        <instruction val="vreducess">Perform a Reduction Transformation on a Scalar Float32 Value</instruction>
        <instruction val="vrndscalepd">Round Packed Float64 Values To Include A Given Number Of Fraction Bits</instruction>
        <instruction val="vrndscalesd">Round Scalar Float64 Value To Include A Given Number Of Fraction Bits</instruction>
        <instruction val="vrndscaleps">Round Packed Float32 Values To Include A Given Number Of Fraction Bits</instruction>
        <instruction val="vrndscaless">Round Scalar Float32 Value To Include A Given Number Of Fraction Bits</instruction>
        <instruction val="vrsqrt14pd">Compute Approximate Reciprocals of Square Roots of Packed Float64 Values</instruction>
        <instruction val="vrsqrt14sd">Compute Approximate Reciprocal of Square Root of Scalar Float64 Value</instruction>
        <instruction val="vrsqrt14ps">Compute Approximate Reciprocals of Square Roots of Packed Float32 Values</instruction>
        <instruction val="vrsqrt14ss">Compute Approximate Reciprocal of Square Root of Scalar Float32 Value</instruction>
        <instruction val="vrsqrt28pd">Approximation to the Reciprocal Square Root of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error</instruction>
        <instruction val="vrsqrt28sd">Approximation to the Reciprocal Square Root of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error</instruction>
        <instruction val="vrsqrt28ps">Approximation to the Reciprocal Square Root of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error</instruction>
        <instruction val="vrsqrt28ss">Approximation to the Reciprocal Square Root of Scalar Single-Precision Floating-Point Value with Less Than 2^-28 Relative Error</instruction>
        <instruction val="vscalefpd">Scale Packed Float64 Values With Float64 Values</instruction>
        <instruction val="vscalefsd">Scale Scalar Float64 Values With Float64 Values</instruction>
        <instruction val="vscalefps">Scale Packed Float32 Values With Float32 Values</instruction>
        <instruction val="vscalefss">Scale Scalar Float32 Value With Float32 Value</instruction>
        <instruction val="vscatterdps">Scatter Packed Single with Signed Dword and Qword Indices</instruction>
        <instruction val="vscatterdpd">Scatter Packed Double with Signed Dword and Qword Indices</instruction>
        <instruction val="vscatterqps">Scatter Packed Single with Signed Dword and Qword Indices</instruction>
        <instruction val="vscatterqpd">Scatter Packed Double with Signed Dword and Qword Indices</instruction>
        <instruction val="vscatterpf0dps">Sparse Prefetch Packed SP/DP Data Values with Signed Dword Indices Using T0 Hint with Intent to Write</instruction>
        <instruction val="vscatterpf0qps">Sparse Prefetch Packed SP/DP Data Values with Signed Qword Indices Using T0 Hint with Intent to Write</instruction>
        <instruction val="vscatterpf0dpd">Sparse Prefetch Packed SP/DP Data Values with Signed Dword Indices Using T0 Hint with Intent to Write</instruction>
        <instruction val="vscatterpf0qpd">Sparse Prefetch Packed SP/DP Data Values with Signed Qword Indices Using T0 Hint with Intent to Write</instruction>
        <instruction val="vscatterpf1dps">Sparse Prefetch Packed SP/DP Data Values with Signed Dword Indices Using T1 Hint with Intent to Write</instruction>
        <instruction val="vscatterpf1qps">Sparse Prefetch Packed SP/DP Data Values with Signed Qword Indices Using T1 Hint with Intent to Write</instruction>
        <instruction val="vscatterpf1dpd">Sparse Prefetch Packed SP/DP Data Values with Signed Dword Indices Using T1 Hint with Intent to Write</instruction>
        <instruction val="vscatterpf1qpd">Sparse Prefetch Packed SP/DP Data Values with Signed Qword Indices Using T1 Hint with Intent to Write</instruction>
        <instruction val="vshuff32x4">Shuffle Packed Values at 128-bit Granularity</instruction>
        <instruction val="vshuff64x2">Shuffle Packed Values at 128-bit Granularity</instruction>
        <instruction val="vshufi32x4">Shuffle Packed Values at 128-bit Granularity</instruction>
        <instruction val="vshufi64x2">Shuffle Packed Values at 128-bit Granularity</instruction>
        <instruction val="vtestpd">Packed Bit Test</instruction>
        <instruction val="vtestps">Packed Bit Test</instruction>
        <instruction val="vzeroall">Zero All YMM Registers</instruction>
        <instruction val="vzeroupper">Zero Upper Bits of YMM Registers</instruction>
        <instruction val="wait">Wait</instruction>
        <instruction val="fwait">Wait</instruction>
        <instruction val="wbinvd">Write Back and Invalidate Cache</instruction>
        <instruction val="wrfsbase">Write FS Segment Base</instruction>
        <instruction val="wrgsbase">Write FS Segment Base</instruction>
        <instruction val="wrmsr">Write to Model Specific Register</instruction>
        <instruction val="wrpkru">Write Data to User Page Key Register</instruction>
        <instruction val="xacquire">Hardware Lock Elision Prefix Hints (XACQUIRE-enabled)</instruction>
        <instruction val="xrelease">Hardware Lock Elision Prefix Hints (XRELEASE-enabled)</instruction>
        <instruction val="xabort">Transactional Abort</instruction>
        <instruction val="xadd">Exchange and Add</instruction>
        <instruction val="xbegin">Transactional Begin</instruction>
        <instruction val="xchg">Exchange Register/Memory with Register</instruction>
        <instruction val="xend">Transactional End</instruction>
        <instruction val="xgetbv">Get Value of Extended Control Register</instruction>
        <instruction val="xlat">Table Look-up Translation</instruction>
        <instruction val="xlatb">Table Look-up Translation</instruction>
        <instruction val="xor">Logical Exclusive OR</instruction>
        <instruction val="xorpd">Bitwise Logical XOR of Packed Double Precision Floating-Point Values</instruction>
        <instruction val="xorps">Bitwise Logical XOR of Packed Single Precision Floating-Point Values</instruction>
        <instruction val="xrstor">Restore Processor Extended States</instruction>
        <instruction val="xrstor64">Restore Processor Extended States</instruction>
        <instruction val="xrstors">Restore Processor Extended States Supervisor</instruction>
        <instruction val="xrstors64">Restore Processor Extended States Supervisor</instruction>
        <instruction val="xsave">Save Processor Extended States</instruction>
        <instruction val="xsave64">Save Processor Extended States</instruction>
        <instruction val="xsavec">Save Processor Extended States with Compaction</instruction>
        <instruction val="xsavec64">Save Processor Extended States with Compaction</instruction>
        <instruction val="xsaveopt">Save Processor Extended States Optimized</instruction>
        <instruction val="xsaveopt64">Save Processor Extended States Optimized</instruction>
        <instruction val="xsaves">Save Processor Extended States Supervisor</instruction>
        <instruction val="xsaves64">Save Processor Extended States Supervisor</instruction>
        <instruction val="xsetbv">Set Extended Control Register</instruction>
        <instruction val="xtest">Test If In Transactional Execution</instruction>
        <!--VMX-->
        <instruction val="invept">Invalidate Translations Derived from EPT</instruction>
        <instruction val="invvpid">Invalidate Translations Based on VPID</instruction>
        <instruction val="vmcall">Call to VM Monitor</instruction>
        <instruction val="vmclear">Clear Virtual-Machine Control Structure</instruction>
        <instruction val="vmfunc">Invoke VM function</instruction>
        <instruction val="vmlaunch">Launch Virtual Machine</instruction>        
        <instruction val="vmptrld">Load Pointer to Virtual-Machine Control Structure</instruction>
        <instruction val="vmptrst">Store Pointer to Virtual-Machine Control Structure</instruction>
        <instruction val="vmread">Read Field from Virtual-Machine Control Structure</instruction>
        <instruction val="vmresume">Resume Virtual Machine</instruction>
        <instruction val="vmwrite">Write Field to Virtual-Machine Control Structure</instruction>
        <instruction val="vmoff">Leave VMX Operation</instruction>
        <instruction val="vmon">Enter VMX Operation</instruction>
        <!--SVM-->
        <instruction val="clgi">Clear Global Interrupt Flag</instruction>
        <instruction val="invlpga">Invalidate TLB Entry in a Specified ASID</instruction>
        <instruction val="skinit">Secure Init and Jump with Attestation</instruction>
        <instruction val="stgi">Set Global Interrupt Flag</instruction>
        <instruction val="vmload">Load State from VMCB</instruction>
        <instruction val="vmmcall">Call VMM</instruction>
        <instruction val="vmrun">Run Virtual Machine</instruction>
        <instruction val="vmsave">Save State to VMCB</instruction>
    </instructionCollection>
    <pseudoCollection>
        <pseudo val="$">The current value of the location counter</pseudo>        
        <pseudo val="ORG">ORG expression&#xd;Sets the location counter to expression</pseudo>        
        <pseudo val="EXTERN">EXTERN name&#xd;Defines external symbol called name</pseudo>
        <pseudo val="DB">[name] DB initializer [, initializer]...&#xd;Allocates and optionally initializes a byte  of storage for each initializer</pseudo>
        <pseudo val="DD">[name] DD initializer [, initializer]...&#xd;Allocates and optionally initializes 4 bytes of storage for each initializer</pseudo>
        <pseudo val="DW">[name] DW initializer [, initializer]...&#xd;Allocates and optionally initializes 2 bytes of storage for each initializer</pseudo>
        <pseudo val="DQ">[name] DQ initializer [, initializer]...&#xd;Allocates and optionally initializes 8 bytes of storage for each initializer</pseudo>
        <pseudo val="EQU">name EQU expression&#xd;The first directive assigns numeric value of expression to name</pseudo>
        <pseudo val="BYTE">Indicates a pointer is point to a byte value</pseudo>
        <pseudo val="WORD">Indicates a pointer is point to a word(2 bytes) value</pseudo>
        <pseudo val="DWORD">Indicates a pointer is point to a double words(4 bytes) value</pseudo>
        <pseudo val="QWORD">Indicates a pointer is point to a quad words(8 bytes) value</pseudo>        
        <pseudo val="OWORD">Indicates a pointer is point to a 10 bytes value</pseudo>                
    </pseudoCollection>
</classfierCollection>
